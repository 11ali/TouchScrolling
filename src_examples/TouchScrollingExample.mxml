<?xml version="1.0" encoding="utf-8"?>
<s:ViewNavigatorApplication xmlns:fx="http://ns.adobe.com/mxml/2009"
	xmlns:s="library://ns.adobe.com/flex/spark"
	splashScreenImage="@Embed('/assets/images/Splashscreen.png')"
	splashScreenScaleMode="letterbox"
	splashScreenMinimumDisplayTime="1000"
	firstView="views.HomeView"
	frameRate="60"
	initialize="preinit()"
	applicationComplete="init()"
	>
	
	<fx:Script>
		<![CDATA[
			import flash.desktop.NativeApplication;
			import model.ExamplesModel;

			import views.ExampleViewBase;
			import views.HomeView;

			import org.gestouch.events.TapGestureEvent;
			import org.gestouch.gestures.TapGesture;

			import mx.core.FlexGlobals;

			
			private var model:ExamplesModel = new ExamplesModel();
			private var appUI:DisplayObject;
			
			
			private function preinit():void
			{
				navigator.firstViewData = model;
				
				appUI = FlexGlobals.topLevelApplication as DisplayObject;
			}
			
			
			private function init():void
			{
				addEventListener(ExampleViewBase.DEMO_BUTTON_CLICK, demoButtonClickHandler);
				CONFIG::AIR
				{
					const manufacturer:String = Capabilities.manufacturer.toLowerCase();
					if (manufacturer.indexOf("android") >= 0 || manufacturer.indexOf("ios") >= 0)
					{
						NativeApplication.nativeApplication.addEventListener(KeyboardEvent.KEY_DOWN, nativeApplication_keyDownHandler);
						NativeApplication.nativeApplication.addEventListener(Event.DEACTIVATE, nativeApplication_deactivateHandler);
					}
				}
				
				var doubleTap:TapGesture = new TapGesture(stage);
				doubleTap.numTapsRequired = 2;
				doubleTap.maxTapDelay = 300;
				doubleTap.slop *= 2;
				doubleTap.addEventListener(TapGestureEvent.GESTURE_TAP, doubleTapHandler);
			}


			private function demoButtonClickHandler(event:Event):void
			{
				appUI.visible = false;
			}
			
			
			private function nativeApplication_keyDownHandler(event:KeyboardEvent):void
			{
				if (event.keyCode == Keyboard.MENU)
				{
					event.preventDefault();
					if (!(navigator.activeView is HomeView))
					{
						if (appUI.visible)
						{
							appUI.visible = false;
						}
						else
						{
							appUI.visible = true;
							appUI.alpha = 0.8;
						}
					}
				}
			}
			
			
			private function nativeApplication_deactivateHandler(event:Event):void
			{
				NativeApplication.nativeApplication.exit();
			}


			private function doubleTapHandler(event:TapGestureEvent):void
			{
				if (!appUI.visible)
				{
					appUI.visible = true;
					appUI.alpha = 0.8;
				}
			}
		]]>
	</fx:Script>
</s:ViewNavigatorApplication>