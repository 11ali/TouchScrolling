<?xml version="1.0" encoding="utf-8"?>
<project name="TouchScrolling" default="debug" basedir=".">

	<!-- Load properties -->
	<property file="build.properties" />


	<!-- Additional tasks -->
	<taskdef resource="net/sf/antcontrib/antcontrib.properties" classpath="${build.dir}/libs/ant-contrib-1.0b3.jar" />


	<!-- Visible targets -->
	<target name="debug" description="">
		<var name="var.app.name" value="TouchScrollingExample" />
		<var name="var.swf.name" value="${var.app.name}.swf" />
		
		<compile.debug input="../src_examples/${var.app.name}.mxml"
			output="${var.swf.name}"
			compilerArguments=""
		/>
		<copy file="${build.dir}/air/descriptor-template-app.xml" tofile="${bindebug.dir}/${var.app.name}-app.xml" overwrite="true">
			<filterset>
				<filter token="ID" value="${project.air.appID}" />
				<filter token="FILENAME" value="${var.app.name}" />
				<filter token="VERSION" value="0.1" />
				<filter token="CONTENT" value="${var.swf.name}" />
            </filterset>
		</copy>
		<antcall target="ide.startDebugger" />
		<!--
		<antcall target="ide.startProfiler" />
		-->
		<exec executable="${flexSDK.adl}">
			<arg value="${bindebug.dir}/${var.app.name}-app.xml" />
			<arg value="${bindebug.dir}" />
		</exec>
	</target>
	
	
	<target name="debug.android" description="">
		<var name="var.app.name" value="TouchScrollingExample" />
		<var name="var.swf.name" value="${var.app.name}.swf" />
		
		<compile.debug input="../src_examples/${var.app.name}.mxml"
			output="${var.swf.name}"
			compilerArguments=""
		/>
		
		<if>
			<equals arg1="${project.android.certificate.password}" arg2="" />
			<then>
				<input message="Certificate password:" addproperty="var.app.certificate.password" />
			</then>
			<else>
				<var name="var.app.certificate.password" value="${project.android.certificate.password}" />
			</else>
		</if>
		
		<var name="var.app.descriptor" value="${bindebug.dir}/${var.app.name}-apk.xml" />
		<copy file="${project.android.descriptor.template}" tofile="${var.app.descriptor}" overwrite="true">
			<filterset>
				<filter token="ID" value="${project.android.appID}" />
				<filter token="FILENAME" value="${var.app.name}" />
				<filter token="VERSION" value="0.1" />
				<filter token="CONTENT" value="${var.swf.name}" />
			</filterset>
		</copy>
		
		<var name="var.debug.port" value="7935" />

		<java jar="${flexSDK.adt}" fork="true" failonerror="true">
			<arg value="-package" />

			<arg value="-target" />
			<arg value="apk-debug" />
			
			<arg line="-listen ${var.debug.port}" />
			
			<arg value="-storetype" />
			<arg value="pkcs12" />
			<arg value="-keystore" />
			<arg value="${project.android.certificate}" />
			<arg value="-storepass" />
			<arg value="${var.app.certificate.password}" />

			<arg value="${bindebug.dir}/${var.app.name}.apk" />
			<arg value="${var.app.descriptor}" />
			<arg value="-C" />
			<arg value="${bindebug.dir}" />
			<arg value="${var.swf.name}" />
		</java>

		<!-- Installing the published application on to the emulator -e for emulator, -d for device -->
		<exec executable="${android.adb}">
			<arg line="-d" />
			<arg line="install" />
			<arg line="-r" />
			<arg line="${bindebug.dir}/${var.app.name}.apk" />
		</exec>
		
		<exec executable="${android.adb}" failonerror="true">
			<arg line="forward tcp:${var.debug.port} tcp:${var.debug.port}"/>
		</exec>		
		<antcall target="ide.startDebugger">
			<param name="asclient" value="true"/>
			<param name="port" value="${var.debug.port}"/>
		</antcall>
		<!--
		-->
		
		<java jar="${flexSDK.adt}" fork="true" failonerror="true">
			<arg value="-launchApp" />
			
			<arg value="-platform" />
			<arg value="android" />
			
			<arg value="-platformsdk" />
			<arg value="${androidSDK.dir}" />
			
			<arg value="-appid" />
			<arg value="${project.android.appID}"/>
		</java>
	</target>
	
	
	<target name="package.android" description="">
		<var name="var.app.name" value="TouchScrollingExample" />
		<var name="var.swf.name" value="${var.app.name}.swf" />
		
		<compile.release input="../src_examples/${var.app.name}.mxml"
			output="${var.swf.name}"
			compilerArguments=""
		/>
		
		<if>
			<equals arg1="${project.android.certificate.password}" arg2="" />
			<then>
				<input message="Certificate password:" addproperty="var.app.certificate.password" />
			</then>
			<else>
				<var name="var.app.certificate.password" value="${project.android.certificate.password}" />
			</else>
		</if>
		
		<var name="var.app.descriptor" value="${bindebug.dir}/${var.app.name}-apk.xml" />
		<copy file="${project.android.descriptor.template}" tofile="${var.app.descriptor}" overwrite="true">
			<filterset>
				<filter token="ID" value="${project.android.appID}" />
				<filter token="FILENAME" value="${var.app.name}" />
				<filter token="VERSION" value="0.1" />
				<filter token="CONTENT" value="${var.swf.name}" />
			</filterset>
		</copy>

		<java jar="${flexSDK.adt}" fork="true" failonerror="true">
			<arg value="-package" />

			<arg value="-target" />
			<arg value="apk" />
			
			<arg value="-storetype" />
			<arg value="pkcs12" />
			<arg value="-keystore" />
			<arg value="${project.android.certificate}" />
			<arg value="-storepass" />
			<arg value="${var.app.certificate.password}" />

			<arg value="${bindebug.dir}/${var.app.name}.apk" />
			<arg value="${var.app.descriptor}" />
			<arg value="-C" />
			<arg value="${bindebug.dir}" />
			<arg value="${var.swf.name}" />
		</java>

		<!-- Installing the published application on to the emulator -e for emulator, -d for device -->
		<exec executable="${android.adb}">
			<arg line="-d" />
			<arg line="install" />
			<arg line="-r" />
			<arg line="${bindebug.dir}/${var.app.name}.apk" />
		</exec>
		
		<java jar="${flexSDK.adt}" fork="true" failonerror="true">
			<arg value="-launchApp" />
			
			<arg value="-platform" />
			<arg value="android" />
			
			<arg value="-platformsdk" />
			<arg value="${androidSDK.dir}" />
			
			<arg value="-appid" />
			<arg value="${project.android.appID}"/>
		</java>
	</target>
	
	
	<target name="package.ipa" description="">
		<var name="var.app.name" value="TouchScrollingExample" />
		<var name="var.swf.name" value="${var.app.name}.swf" />
		
		<compile.debug input="../src_examples/TouchScrollingExample.mxml"
			output="${var.swf.name}"
			compilerArguments=""
			air="true"
		/>
		
		<if>
			<equals arg1="${project.android.certificate.password}" arg2="" />
			<then>
				<input message="Certificate password:" addproperty="var.app.certificate.password" />
			</then>
			<else>
				<var name="var.app.certificate.password" value="${project.android.certificate.password}" />
			</else>
		</if>
		
		<var name="var.app.descriptor" value="${bindebug.dir}/${var.app.name}-ipa.xml" />
		<copy file="${project.ios.descriptor.template}" tofile="${var.app.descriptor}" overwrite="true">
			<filterset>
				<filter token="ID" value="${project.ios.appID}" />
				<filter token="FILENAME" value="${var.app.name}" />
				<filter token="VERSION" value="0.1" />
				<filter token="CONTENT" value="${var.swf.name}" />
			</filterset>
		</copy>

		<java jar="${flexSDK.adt}" fork="true" failonerror="true">
			<arg value="-package" />

			<arg value="-target" />
			<arg value="ipa-ad-hoc" />
			
			<arg line="-provisioning-profile ${project.ios.provisionprofile}"/>
			
			<arg value="-storetype" />
			<arg value="pkcs12" />
			<arg value="-keystore" />
			<arg value="${project.ios.certificate}" />
			<arg value="-storepass" />
			<arg value="${var.app.certificate.password}" />

			<arg value="${bindebug.dir}/${var.app.name}.ipa" />
			<arg value="${var.app.descriptor}" />
			<arg value="-C" />
			<arg value="${bindebug.dir}" />
			<arg value="${var.swf.name}" />
		</java>
	</target>
	

	<target name="ide.startDebugger" description="Starts IDE Debugger">
		<if>
			<equals arg1="${user.ide}" arg2="FDT"/>
			<then>
				<if>
					<isset property="port"/>
					<then>
						<fdt.startDebugger projectname="${project.name}" asclient="${asclient}" port="${port}" />
					</then>
					<else>
						<fdt.startDebugger projectname="${project.name}"/>
					</else>
				</if>
			</then>
			<else>
				<echo>ide.startDebugger task is available only for FDT. TODO: tasks for other IDEs</echo>
			</else>
		</if>
	</target>

	<target name="ide.startProfiler" description="Starts IDE Profiler">
		<if>
			<equals arg1="${user.ide}" arg2="FDT"/>
			<then>
				<fdt.startProfiler projectname="${project.name}"/>
			</then>
			<else>
				<echo>ide.startProfiler task is available only for FDT. TODO: tasks for other IDEs</echo>
			</else>
		</if>
	</target>

	

	<macrodef name="compile.debug">
		<attribute name="input" />
		<attribute name="output" />
		<attribute name="compilerArguments" default="" />
		<attribute name="air" default="true" />
		<attribute name="openSWF" default="false" />
		<sequential>
			<var name="var.compilerArguments" value="${project.defaultCompilerArguments} ${project.debugCompilerArguments} @{compilerArguments}" />
			<if>
				<equals arg1="@{air}" arg2="true" />
				<then>
					<var name="var.compilerArguments" value="${var.compilerArguments} ${project.mobileCompilerArguments} +configname=airmobile" />
					<var name="var.compilerArguments" value="${var.compilerArguments} -define+=CONFIG::AIR,true" />
				</then>
				<else>
					<var name="var.compilerArguments" value="${var.compilerArguments} -define+=CONFIG::AIR,false" />
				</else>
			</if>

			<if>
				<equals arg1="${user.ide}" arg2="FDT"/>
				<then>
					<fdt.launch.application projectname="${project.name}"
						compilerarguments="${var.compilerArguments}"
						mainclass="${src.dir}/@{input}"
						debug="true"
						profile="false"
						target="${bindebug.dir}/@{output}" 
						startswf="@{openSWF}"
						swflauncher="Adobe Flash Player"
					/>
				</then>
				<else>
					<java jar="${flexSDK.mxmlc}" dir="${flexSDK.dir}/frameworks" fork="true" failonerror="true">
						<arg value="${src.dir}/@{input}"/>
						<arg value="-incremental=false"/>
						<arg value="-headless-server=true"/>
						<arg value="+configname=flex"/>
						<arg value="-source-path+=${src.dir}"/>
						<arg value="-source-path+=${src_examples.dir}"/>
						<arg value="-source-path+=${src_external.dir}"/>
						<arg value="-library-path+=${FLEX_HOME}/frameworks/libs"/>
						<arg value="-library-path+=${FLEX_HOME}/frameworks/libs/mx"/>
						<arg value="-library-path+=${libs.dir}"/>
						<arg value="-output=${bindebug.dir}/@{output}"/>
						<arg line="${var.compilerArguments}"/>
					</java>
					
					<if>						
						<and>
							<equals arg1="@{openSWF}" arg2="true" />
							<equals arg1="@{air}" arg2="false" />
						</and>
						<then>
							<exec executable="open" vmlauncher="true" spawn="false" failonerror="true">
								<arg line="-a '${flashPlayer}'" />
								<arg line="${bindebug.dir}/@{output}" />
							</exec>
						</then>
					</if>
				</else>
			</if>
		</sequential>
	</macrodef>

	<macrodef name="compile.release">
		<attribute name="input" />
		<attribute name="output" />
		<attribute name="compilerArguments" default="" />
		<attribute name="air" default="true" />
		<attribute name="openSWF" default="false" />
		<sequential>
			<var name="var.compilerArguments" value="${project.defaultCompilerArguments} ${project.releaseCompilerArguments} @{compilerArguments}" />
			<if>
				<equals arg1="@{air}" arg2="true" />
				<then>
					<var name="var.compilerArguments" value="${var.compilerArguments} ${project.mobileCompilerArguments} +configname=airmobile" />
					<var name="var.compilerArguments" value="${var.compilerArguments} -define+=CONFIG::AIR,true" />
				</then>
				<else>
					<var name="var.compilerArguments" value="${var.compilerArguments} -define+=CONFIG::AIR,false" />
				</else>
			</if>
			
			<java jar="${flexSDK.mxmlc}" dir="${flexSDK.dir}/frameworks" fork="true" failonerror="true">
				<arg value="${src.dir}/@{input}"/>
				<arg value="-incremental=false"/>
				<arg value="-headless-server=true"/>
				<arg value="+configname=flex"/>
				<arg value="-source-path+=${src.dir}"/>
				<arg value="-source-path+=${src_examples.dir}"/>
				<arg value="-source-path+=${src_external.dir}"/>
				<arg value="-library-path+=${FLEX_HOME}/frameworks/libs"/>
				<arg value="-library-path+=${FLEX_HOME}/frameworks/libs/mx"/>
				<arg value="-library-path+=${libs.dir}"/>
				<arg value="-output=${binrelease.dir}/@{output}"/>
				<arg line="${var.compilerArguments}"/>
			</java>
			
			<if>						
				<and>
					<equals arg1="@{openSWF}" arg2="true" />
					<equals arg1="@{air}" arg2="false" />
				</and>
				<then>
					<exec executable="open" vmlauncher="true" spawn="false" failonerror="true">
						<arg line="-a '${flashPlayer}'" />
						<arg line="${bindebug.dir}/@{output}" />
					</exec>
				</then>
			</if>
		</sequential>
	</macrodef>

</project>

<!-- Other useful stuff

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

Compile single SWF with preloader (main class compiled to second frame)

<compile.debug mainClass="projectPackage/preloader/${project.name}Preloader.as"
	output="${project.name}.swf"
	compilerArguments="-frame two projectPackage.${project.name}"
/>

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

Upload to FTP

<ftp server="server"
	userid="login"
	password="password"
	remotedir="remotedir"
	verbose="true">
	<fileset dir="${bindebug.dir}" />
</ftp>

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

Upload to SFTP

<scp todir="login:password@server:remotedir"
	trust="true"
	verbose="true">
	<fileset dir="${bindebug.dir}">
		<include name="${project.name}.swf" />
	</fileset>
</scp>

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

Launch ADL

<exec executable="${flexSDK.adl}">
	<arg value="${project.air.descriptor}" />
	<arg value="${project.bindebug.dir}" />
</exec>

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

ADT arguments				

For more assets add them in form of the following examples. 
Edit <${assets_dir}> to add files from other directories than the standard assets directory.
Note that all subdirectories will also be packaged!
 
 * for a single file:
	<arg value="-C" />
	<arg value="${assets_dir}" />
	<arg value="example.png" />
	
 * for a directory in the assets directory:
 	<arg value="-C" />
	<arg value="${assets_dir}" />
	<arg value="example_directory_name" />
 
 * for a subdirectory in an other directory in the assets directory:
 	<arg value="-C" />
	<arg value="${assets_dir}/parent_directory" />
	<arg value="example_directory_name" />

-->